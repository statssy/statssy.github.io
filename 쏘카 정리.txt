https://tech.socarcorp.kr/data/2022/06/10/reservation-tetris.html

# 예약 테트리스 프로젝트

## 1.예약 테트리스 프로젝트 소개
### 1.1 프로제트 이름의 유래
- 들어오는 예약을 차량의 빈 공간에 차곡차곡 정리하는 과정. 마치 테트리스
- 차량이 사용되지않는 시간이 적을수록 운영효율이 좋다.
  
### 1.2 예약 테트리스의 목적
- 운영 효율 개선
- 업무 효율 개선

## 2.예약 테트리스 최적화 모델링
### 2.1 최적화 문제의 접근법
- 문제 맞춤 알고리즘
- 휴리스틱 알고리즘
- 수학적 모델링 후 솔버 사용

### 2.2 정수계획법
- 제약조건, 결정변수(x,y, 해공간), 목적함수

### 2.3 최적화 지표 정의하기 : 어떤 상태가 더 '최적'일까?
- 가상예약이라는 개념의 지표를 만듬
    - 실제 예약 : 실제로 고객이 이용, 예정인 예약
    - 가상 예약 : 예약이 들어올수 있는 여유 공간의 가상의 예약

### 2.4 최적화 모델 정의하기
- 결정변수 : 실제 또는 가상의 예약에 차량의 배정 여부(0, 1)
- 목적함수 : 예약 가능한 가상 예약건수의 최대화
- 제약조건
    - 모든 예약은 단 하나의 차량에 배정되어야한다.
    - 차량이 고정되어야 하는 예약은 배정된 차량이 변경되면 안된다.
    - 임의의 서로 다른 두 개의 실제 예약은 같은 차량에 배정된 경우 서로 겹칠 수 없다.
    - 임의의 실제 예약과 가상 예약은 같은 차량에 배정된 경우 서로 겹칠 수 없다.

### 2.5 최적화 모델 구현하기 : Google OR-Tools
- 오픈소스

## 3. 예약 테트리스 모델 배포
- 요구조건
    - Sovler 서버환경
    - 서비스 서버와 최적화 서버의 데이터 요청 프로토콜 필요

### 3.1 최적화 서버 & 병렬 처리
- 최적화 실행하기 위해 많은 컴퓨팅 파워 필요
- 새로운 예약이 들어온다면 그 최적화는 다시 실행
- 병렬처리 ```ray``` 활용 (multiprocessing보다 간단)
- CPU 224개를 선점형 인스턴스를 사용하면 1시간에 1.69달러로 저렴
- 그러나 도중에 회수당할수도있어서 종료되면 새로운 서버 띄우는 방식으로 구현(shutdown script)

### 3.2 서비스 서버와 최적화 서버의 데이터 프로토콜
- 예약이 하나 생성될 때마다 실시간으로 실행돼야 해?
- 예약 새로 생성마다 최적화 vs 많은 예약을 배치로 정리 방식
- 예약이 들어올때마다 기존 예약 바꾸는 실험은 일희일비한 모습을 보임(운영 혼란)
- 일정 간격으로 정리하는 배치 방식으로 결정
- 데이터 관련
    - 데이터 웨어하우스 BigQuery는 실시간으로 데이터 저장하지않고, 1시간에 1번씩 저장
    - 추후 최적화 요청 빈도가 변할수 있기 때문에 웨어하우스의 데이터를 사용하지 않고 별도의 메시지로 데이터를 주고받기로함.
    - 메시지 프로토콜은 서버에선 메세지를 Push하고 최적화 서버에선 메시지를 받아와(Pull) 연산 후 다시 서버 쪽에게 최적화 결과를 반환하는 구조
    - API 형태로 진행하는 방법을 고민하였으나, 연산 시간이 오래 소요될 수 있기 때문에 메시지 형태로 작업 협의
- 메시지 시스템
    - 대표적으로 Apache Kafka, AWS SQS, GCP Pub/Sub 등
    - Kafka 띄우기엔 리소스가 더 크고, 클라우드의 매니지드 시스템인 AWS SQS와 GCP Pub/Sub 고려
    - AWS SQS는 최대 Payload Size가 256KB, GCP Pub/Sub은 최대 10MB
    - 90일간의 예약 내역과 차종 데이터를 담아 메시지로 보내길 때문에 GCP Pub/Sub 사용 결정
- 메시지 받은 후 데이터 처리
    - GCP의 Dataflow로 데이터 처리
    - Pub/Sub과 Dataflow의 결합이 편리하므로
    - 빅쿼리 형태에 맞게 Transform 및 저장
- 인프라
    - 서비스 서버에서 최적화 요청 하기전에, 최적화 서버를 띄우는 메시지 보냄
    - 그 과정에서 최적화 서버가 띄어지고, 서비스 서버는 Pub/Sub에 최적화가 필요한 예약과 차종 데이터를 보냄(Push)
    - 최적화 서버에서는 메시지를 받고(Pull) Ray로 최적화를 병렬로 실행
    - 최적화 결과를 서비스 서버에게 보냄(Push)
    - 서비스 서버에선 최저고하 결과를 데이터베이스에 반영하고 성공 여부를 다시 최적화 결과 Pub/Sub에 보냄(Push)
    - 실행된 최적화 서버는 서버의 CPU, Memory 사용량이 특정 조건이 될 경우(예: 일정 시간 이상 CPU Usage가 5% 이하인 경우) 최적화 서버를 종료
    - 위 과정에서 선점형 인스턴트가 구글에게 회수된다면, Shutdown Script가 다시 최적화 서버를 실행

## 4. 예약 테트리스 적용 성과
- 효율 체크
    - 사용한 차량 = 전체 운영 중인 차량 중 예약에 사용된 차량의 비율 = 차량 사용 비율
    - 차량의 점유 정도 = 판매 가능한 모든 차량의 시간 중 예약으로 점유된 시간의 비율 = 가동률
- 결과
    - 예약 테트리스 적용 후 많이 좋아짐
    - 남는차량이 없으면(차량사용비율이 높으면) 최적화할 여지가 없음